<!-- views/chat.ejs -->
<!DOCTYPE html>
<html>

<head>
    <title>Chat Interface</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/default.min.css">
    <style>
        .chat-container {
            max-width: 800px;
            margin: 0 auto;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f5f5f5;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px;
            background: white;
            border-radius: 8px;
            position: relative;
        }

        .code-block {
            position: relative;
            margin: 10px 0;
        }

        .copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 5px 10px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .input-container {
            padding: 20px;
            background: white;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        }

        #message-input {
            width: 100%;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 25px;
            font-size: 16px;
                        /* 新增样式，设置高度和禁止调整大小 */
            height: 100px;
            resize: none;
        }
    </style>
</head>

<body>
    <div class="chat-container">
        <div class="messages-container" id="messages">
        </div>

        <div class="input-container">
            <!-- <input type="text" id="message-input" placeholder="Type your message..." onkeypress="handleKeyPress(event)"> -->
            <textarea id="message-input" placeholder="Type your message..." onkeypress="handleKeyPress(event)"></textarea>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/highlight.min.js"></script>
    <script>
        // 初始化消息数组
        const messages = [];
        function renderMessages() {
            const messagesContainer = document.getElementById('messages');
            messagesContainer.innerHTML = '';
            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.innerHTML = `
                    <strong>${message.user}:</strong>
                    <div class="content">
                        ${formatContent(message.content)}
                    </div>
                `;
                messagesContainer.appendChild(messageDiv);
            });

            // 代码高亮初始化
            const codeBlocks = document.querySelectorAll('pre code');
            codeBlocks.forEach((block) => {
                hljs.highlightElement(block);

                // 添加复制按钮
                const pre = block.parentElement;
                pre.classList.add('code-block'); // 确保代码块有 code-block 类
                const copyBtn = document.createElement('button');
                copyBtn.className = 'copy-button';
                copyBtn.textContent = 'Copy';
                copyBtn.onclick = () => {
                    navigator.clipboard.writeText(block.textContent);
                    copyBtn.textContent = 'Copied!';
                    setTimeout(() => copyBtn.textContent = 'Copy', 2000);
                };
                pre.appendChild(copyBtn);
            });

            // 自动滚动到底部
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // 消息发送逻辑
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            input.value = '';
            if (message) {
                messages.push({ user: 'You', content: message });
                renderMessages();
                try {
                    const response = await fetch('/api/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ message })
                    });

                    const result = await response.json();
                    if (result.status === 'success') {
                        messages.push({ user: 'Assistant', content: result.messages.assistant.content });
                        // 更新消息历史
                        messages.length = Math.min(messages.length, 10);
                        renderMessages();
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                }
            }
        }

        function handleKeyPress(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        }

        function formatContent(content) {
            // 初始化 processed 变量
            let processed = content;

            // 链接自动识别
            processed = processed.replace(
                /(https?:\/\/[^\s]+)/g,
                '<a href="$1" target="_blank">$1</a>'
            );

            // 代码块高亮
            processed = processed.replace(
                /```([\s\S]*?)```/g,
                (match, code) => {
                    // 对于 HTML 代码块，不进行转义
                    if (code.trim().startsWith('<')) {
                        return `<pre><code class="language-html">${code}</code></pre>`;
                    }
                    // 其他代码块，进行转义
                    code = code.replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    return `<pre><code>${code}</code></pre>`;
                }
            );
            
            return processed;
        }
    </script>
</body>

</html>